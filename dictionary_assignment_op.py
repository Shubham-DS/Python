# -*- coding: utf-8 -*-
"""Dictionary_Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13dfxUwWl9C_TtRvRMt5mZXWzB6kKtHcn
"""

# Initialize a dictionary "emp_info" with below details
# In - emp_info['Tom']
# Out - {'email':'tom_latham019@gmail.com', 'Phone': +1987654321, 'City': 'California'}
emp_info={'Tom':{'email':'tom_latham019@gmail.com', 'Phone': +1987654321, 'City': 'California'}}
print(emp_info['Tom'])

# In - emp_info['Kathy']
# Out - {'email':'kathy_abram897@gmail.com', 'Phone': +1887654321, 'City': 'New York'}
emp_info={'Kathy':{'email':'kathy_abram897@gmail.com', 'Phone': +1887654321, 'City': 'New York'}}
print(emp_info['Kathy'])

# Create a dictionary out of below inputs
# lst1 = ['emp1', 'emp2', 'emp3']
# emp_key = ['e_name', 'e_id', 'e_sal']
# emp1_val = ['John', 'SG101', '$10,000']
# emp2_val = ['Smith', 'SG102', '$9,000']
# emp3_val = ['Peter', 'SG103', '$9,500']

# Expected Output:- {'emp1':{'e_name':'John', 'e_id':'SG101', 'e_sal':$10,000}, 
#                    'emp2':{'e_name':'Smith', 'e_id':'SG102', 'e_sal':$9,000}, 
#                    'emp3':{'e_name':'Peter', 'e_id':'SG103', 'e_sal':$9,500}}

lst1 = ['emp1', 'emp2', 'emp3']
emp_key = ['e_name', 'e_id', 'e_sal']
emp_info={'emp1':{'e_name':'John', 'e_id':'SG101', 'e_sal':'$10,000'}, 
          'emp2':{'e_name':'Smith', 'e_id':'SG102', 'e_sal':'$9,000'}, 
          'emp3':{'e_name':'Peter', 'e_id':'SG103', 'e_sal':'$9,500'}}
print(emp_info)

# Acess the value of key 'history'

sampleDict = { 
   "class":{ 
      "student":{ 
         "name":"Mike",
         "marks":{ 
            "physics":70,
            "history":80
         }
      }
   }
}
print(sampleDict['class']['student']['marks']['history'])
print(sampleDict.get('class').get('student').get('marks').get('history'))
print(sampleDict.setdefault('class').setdefault('student').setdefault('marks').setdefault('history'))

# Initialize dictionary with default values. Inputs are:-
# employees = ['Kelly', 'Emma', 'John']
# defaults = {"designation": 'Application Developer', "salary": 8000}

#Expected output:- {'Kelly': {'designation': 'Application Developer', 'salary': 8000}, 
#                   'Emma': {'designation': 'Application Developer', 'salary': 8000}, 
#                   'John': {'designation': 'Application Developer', 'salary': 8000}}

employees = ['Kelly', 'Emma', 'John']
defaults = {"designation": 'Application Developer', "salary": 8000}
d={}
d=d.fromkeys(employees,{"designation": 'Application Developer', "salary": 8000})
d

# In gene expression, mRNA is transcribed from a DNA template. 
# The 4 nucleotide bases of A, T, C, G corresponds to the U, A, G, C bases of the mRNA. 
# Write a function that returns the mRNA transcript given the sequence of a DNA strand.

# Use a dictionary to provide the mapping of DNA to RNA bases.

# Write a function which takes a word as input and returns a dictionary with letters as key and no of time letters are repeated as value.
# In - count_letter('google.com')
# Out - {'g': 2, 'o': 3, 'l': 1, 'e': 1, '.': 1, 'c': 1, 'm': 1}
d={}
s=input('Enter a string: ')
for i in s:
  if i in d:
    d[i]+=1
  else:
    d[i]=1
print(d)

# A DNA strand consisting of the 4 nucleotide bases is usually represented with a string of letters: A,T, C, G. 
# Write a function that computes the base composition of a given DNA sequence.

# In - baseComposition("CTATCGGCACCCTTTCAGCA")
# Out - {'A': 4, 'C': 8, 'T': 5,  'G': 3 }
d={}
s=input('Enter the string: ')
for i in s:
    if i in d:
        d[i]+=1
    else:
        d[i]=1
print(d)
    
# In - baseComposition("AGT")
# Out - {'A': 1, 'C': 0, 'T': 1,  'G': 1 }

# [MCQ] Suppose "d" is an empty dictionary, which statement does not assign "d" with {"Name":"Tom"}? 
# 1. d = {"Name": "Tom" }
# 2. d["Name"] = "Tom"
# 3. d.update({"Name": "Tom" })
# 4. d.setdefault("Name", "Tom")
# 5. None of the above.
Ans=none of the above

# [MCQ] d = {"a":1, "b":2}. Which of the statements returns [1,2]? 
# 1. d.keys()
# 2. d.values()
# 3. d.items()
# 4. d.popitem()
# 5. None of the above.
Ans=d.values()

# [MCQ] Which of the following declarations is not valid for 'dict' type?
# 1. d = {"Name": "Tom" }
# 2. d = { (1,3,4): 4.5 }
# 3. d = { ["First", "Last"]: (1,3) }
# 4. d = { 1: 0.4 }
# 5. None of the above
Ans= none of the above

# Write a function reverseLookup(dictionary, value) that takes in a dictionary 
# and a value as arguments and returns a sorted list of all keys that contains the value. 
# The function will return an empty list if no match is found.

# In - reverseLookup({'a':1, 'b':2, 'c':2}, 1)
# Out - ['a']
# In - reverseLookup({'a':1, 'b':2, 'c':2}, 2)
# Out - ['b', 'c']
# In - reverseLookup({'a':1, 'b':2, 'c':2}, 3)
# Out - []

# Write a function invertDictionary(d) that takes in a dictionary as argument and return a dictionary that inverts the keys and the values of the original dictionary.
# In - invertDictionary({'a':1, 'b':2, 'c':3, 'd':2})
# Out - {1: ['a'], 2: ['b', 'd'], 3: ['c']}
# In - invertDictionary({'a':3, 'b':3, 'c':3})
# Out - {3: ['a', 'c', 'b']}
# In - invertDictionary({'a':2, 'b':1, 'c':2, 'd':1})
# Out - {1: ['b', 'd'], 2: ['a', 'c']}

# Write a function that converts a sparse vector into a dictionary as described above.
# In - convertVector([1, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 4])
# Out - {0: 1, 3: 2, 7: 3, 12: 4}
# In - convertVector([1, 0, 1 , 0, 2, 0, 1, 0, 0, 1, 0])
# Out - {0: 1, 2: 1, 4: 2, 6: 1, 9: 1}
# In - convertVector([0, 0, 0, 0, 0])
# Out - {}

# Write a function that converts a dictionary back to its sparse vector representation.
# In - convertDictionary({0: 1, 3: 2, 7: 3, 12: 4})
# Out - [1, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 4]
# In - convertDictionary({0: 1, 2: 1, 4: 2, 6: 1, 9: 1})
# Out - [1, 0, 1, 0, 2, 0, 1, 0, 0, 1]
# In - convertDictionary({})
# Out - []

# Given a Python dictionary, Change Bradâ€™s salary to 8500
sampleDict = {
     'emp1': {'name': 'Jhon', 'salary': 7500},
     'emp2': {'name': 'Emma', 'salary': 8000},
     'emp3': {'name': 'Brad', 'salary': 6500}
}

sampleDict['emp3']['salary'] = 8500
print(sampleDict)

# Expected Output
# sampleDict = {
#      'emp1': {'name': 'Jhon', 'salary': 7500},
#      'emp2': {'name': 'Emma', 'salary': 8000},
#      'emp3': {'name': 'Brad', 'salary': 8500}
# }

# Get the key corresponding to the minimum value from the following dictionary
sampleDict = {
  'Physics': 82,
  'Math': 65,
  'history': 75
}
d={}
d=min(sampleDict.values())
print(d)

# Expected Output
# Math

# Rename key city to location in the following dictionary
sampleDict = {
  "name": "Kelly",
  "age":25,
  "salary": 8000,
  "city": "New york"
}
new_key="location"
old_key="city"
sampleDict[new_key]=sampleDict.pop(old_key)
print(sampleDict)


# Expected Output
# {
#   "name": "Kelly",
#   "age":25,
#   "salary": 8000,
#   "location": "New york"
# }

# Check if a value 200 exists in a dictionary
sampleDict = {'a': 100, 'b': 200, 'c': 300}
print(200 in sampleDict.values())

# Expected Output: True

# Delete set of keys from Python Dictionary
# sampleDict = {
#   "name": "Kelly",
#   "age":25,
#   "salary": 8000,
#   "city": "New york"
  
# }
# keysToRemove = ["name", "salary"]

# Expected Output:
# {'city': 'New york', 'age': 25}